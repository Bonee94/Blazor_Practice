@using Microsoft.AspNetCore.Components.Forms
@inherits OwningComponentBase
<EditForm Model="editingJob" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="border p-3 mb-3 bg-light rounded">
        <div class="mb-2">
            <label>Date Completed</label>
            <InputDate class="form-control" @bind-Value="editingJob.DateCompleted" />
        </div>

        <div class="mb-2">
            <label>Service Type</label>
            <InputSelect class="form-control" @bind-Value="editingJob.ServiceType">
                <option value="">-- Select a service --</option>
                @foreach (var service in ServiceTypes)
                {
                    <option @key=service value="@service.Name">@service.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-2">
            <label>Note</label>
            <textarea class="form-control" @bind="editingJob.Note" @bind:event="oninput">
            </textarea>
        </div>

        @if (!JobsEqual(originalJob, editingJob))
        {
            <button type="submit" class="btn btn-success btn-sm me-2">Save Job</button>
        }
    </div>
</EditForm>

@code {
    [Parameter] public Job Job { get; set; } = new();
    [Parameter] public List<ServiceType> ServiceTypes { get; set; } = new();
    [Parameter] public EventCallback<Job> OnValidSubmit { get; set; }

    private Job editingJob = new();
    private Job originalJob = new();
    protected override void OnInitialized()
    {
        // Clone the job so edits don't affect original until saved
        originalJob = new Job
        {
            DateCompleted = Job.DateCompleted,
            ServiceType = Job.ServiceType,
            Note = Job.Note
        };

        editingJob = new Job
        {
            DateCompleted = Job.DateCompleted,
            ServiceType = Job.ServiceType,
            Note = Job.Note
        };
    }

    private async Task HandleSubmit()
    {
        if (!JobsEqual(originalJob, editingJob))
        {
            // Copy edited values back into original Job
            Job.DateCompleted = editingJob.DateCompleted;
            Job.ServiceType = editingJob.ServiceType;
            Job.Note = editingJob.Note;

            await OnValidSubmit.InvokeAsync(Job);

            // Refresh originalJob to new saved state
            originalJob = new Job
            {
                DateCompleted = Job.DateCompleted,
                ServiceType = Job.ServiceType,
                Note = Job.Note
            };
        }
    }

    private bool JobsEqual(Job a, Job b)
    {
        return a.DateCompleted == b.DateCompleted
        && a.ServiceType == b.ServiceType
        && (a.Note ?? "") == (b.Note ?? "");
    }
}