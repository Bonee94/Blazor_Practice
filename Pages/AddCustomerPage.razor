@page "/customers/add"
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager
@inject ServiceTypeService ServiceTypeService

<h3>Add Customer</h3>
<EditForm EditContext="_customerEditContext" OnSubmit="HandleCustomerSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row my-3 pt-3 border rounded bg-secondary shadow-sm bg-opacity-10">
        <div class="col-12 col-md-6">
            <div class="h-100">
                <div class="mb-3">
                    <label>Name</label>
                    <InputText class="form-control" @bind-Value="newCustomer.Name" />
                </div>
                <div class="mb-3">
                    <label>Email</label>
                    <InputText class="form-control" @bind-Value="newCustomer.Email" />
                </div>
                <div class="mb-3">
                    <label>Phone</label>
                    <input class="form-control" type="tel" @bind="newCustomer.Phone" maxlength="12"
                        oninput="this.value=this.value.replace(/[^0-9\-]/g,'')" onblur="formatPhone(this)" />
                </div>
            </div>
        </div>

        <div class="col-12 col-md-6">
            <div class="h-100">
                <AddNewCustomerJobForm @ref="jobFormRef" Job="newJob" ServiceTypes="serviceTypes" />
            </div>
        </div>
    </div>


    <button type="submit" class="btn btn-success">Save</button>
</EditForm>

@code {
    private Customer newCustomer = new() { Jobs = new() };
    private Job newJob = new() { DateCompleted = DateTime.Today };
    private List<ServiceType> serviceTypes = new();

    private AddNewCustomerJobForm? jobFormRef;
    private EditContext _customerEditContext = default!;

    protected override void OnInitialized()
    {
        serviceTypes = ServiceTypeService.GetAll();
        _customerEditContext = new EditContext(newCustomer);
    }

    private async Task HandleCustomerSubmit()
    {
        if (jobFormRef is null)
            return;

        bool jobValid = await jobFormRef.ValidateAndReturnJobAsync();
        bool customerValid = _customerEditContext.Validate();

        if (!jobValid)
            return;

        // Only add the job if it's not already in the customer's job list
        if (!newCustomer.Jobs.Contains(newJob))
        {
            newCustomer.Jobs.Add(newJob);
        }

        customerValid = _customerEditContext.Validate();

        if (!customerValid)
            return;

        CustomerService.Add(newCustomer);
        NavigationManager.NavigateTo("");
    }

}
