@page "/customers/edit/{id:int}"
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager
@inject ServiceTypeService ServiceTypeService
@using Microsoft.AspNetCore.Components.Forms

<h3>Edit Customer</h3>

@if (customer == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="customer" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="customer.Name" />
        </div>
        <div class="mb-3">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="customer.Email" />
        </div>
        <div class="mb-3">
            <label>Phone</label>
            <InputText class="form-control" @bind-Value="customer.Phone" />
        </div>

        <button class="btn btn-sm btn-outline-primary mb-3" type="button" @onclick="ShowJobForm">
            <i class="bi bi-plus-circle me-1"></i> Add Job
        </button>

        @if (showJobForm)
        {
            <AddJobForm Job="newJob" ServiceTypes="serviceTypes" OnSubmit="AddJob" OnCancel="CancelJobForm" />
        }

        @if (customer.Jobs?.Count > 0)
        {
            <h5>Job History</h5>
            @foreach (var job in customer.Jobs.OrderByDescending(j => j.DateCompleted))
            {
                <JobEditForm  @key="job" Job="job" ServiceTypes="serviceTypes" OnValidSubmit="@(() => SaveJob(customer.Jobs.IndexOf(job)))" />
            }
        }


        <button type="submit" class="btn btn-success">Save Customer</button>
        <a href="" class="btn btn-secondary ms-2">Cancel</a>
    </EditForm>
    <br />
}

@code {
    [Parameter] public int id { get; set; }

    private Customer? customer;
    private List<ServiceType> serviceTypes = new();

    private bool showJobForm = false;
    private Job newJob = new();

    protected override void OnInitialized()
    {
        customer = CustomerService.GetById(id);
        serviceTypes = ServiceTypeService.GetAll();
    }

    private void ShowJobForm()
    {
        showJobForm = true;
        newJob = new Job
        {
            DateCompleted = DateTime.Today
        };
    }

    private void CancelJobForm()
    {
        showJobForm = false;
        newJob = new();
    }

    private void AddJob()
    {
        if (customer != null && !string.IsNullOrWhiteSpace(newJob.ServiceType))
        {
            customer.Jobs.Add(newJob);
            CancelJobForm();
            StateHasChanged();
        }
    }

    private void SaveJob(int index)
    {
        // Job is already updated via submission in edit job component
        Console.WriteLine($"Job {index} saved for customer {customer?.Name}");
    }

    private void HandleValidSubmit()
    {
        if (customer is not null)
        {
            CustomerService.Update(customer);
            NavigationManager.NavigateTo("");
        }
    }
}
